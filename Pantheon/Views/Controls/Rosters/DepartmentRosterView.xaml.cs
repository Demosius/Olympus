using System;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using Pantheon.ViewModels.Controls.Rosters;
using Pantheon.ViewModels.Converter;

namespace Pantheon.Views.Controls.Rosters;

/// <summary>
/// Interaction logic for DepartmentRosterView.xaml
/// </summary>
public partial class DepartmentRosterView
{
    private DepartmentRosterVM? VM => DataContext as DepartmentRosterVM;

    public DepartmentRosterView()
    {
        InitializeComponent();
    }

    private readonly Style centerStyle = new()
    {
        TargetType = typeof(TextBlock),
        Setters =
        {
            new Setter(TextBlock.TextAlignmentProperty, TextAlignment.Center),
        }
    };

    private void DataGrid_OnAutoGeneratingColumn(object? sender, DataGridAutoGeneratingColumnEventArgs e)
    {
        var column = e.Column;
        var header = column.Header.ToString();

        column.IsReadOnly = true;

        if (header != nameof(EmployeeRosterVM.EmployeeName) && column is DataGridTextColumn textColumn)
            textColumn.ElementStyle = centerStyle;

        column.MinWidth = header == nameof(EmployeeRosterVM.SelectedShift) ? 100 : 120;

        switch (header)
        {
            case nameof(EmployeeRosterVM.EmployeeName):
                column.Header = "Employee";
                break;
            case nameof(EmployeeRosterVM.ShiftName):
                column.Header = "Shift";
                break;
            case nameof(EmployeeRosterVM.MondayRoster):
                column.Header = $"Monday ({VM!.StartDate:dd-MMM})";
                break;
            case nameof(EmployeeRosterVM.TuesdayRoster):
                column.Header = $"Tuesday ({VM!.StartDate.AddDays(1):dd-MMM})";
                break;
            case nameof(EmployeeRosterVM.WednesdayRoster):
                column.Header = $"Wednesday ({VM!.StartDate.AddDays(2):dd-MMM})";
                break;
            case nameof(EmployeeRosterVM.ThursdayRoster):
                column.Header = $"Thursday ({VM!.StartDate.AddDays(3):dd-MMM})";
                break;
            case nameof(EmployeeRosterVM.FridayRoster):
                column.Header = $"Friday ({VM!.StartDate.AddDays(4):dd-MMM})";
                break;
            case nameof(EmployeeRosterVM.SaturdayRoster):
                column.Visibility = VM!.UseSaturdays ? Visibility.Visible : Visibility.Collapsed;
                column.Header = $"Saturday ({VM!.StartDate.AddDays(5):dd-MMM})";
                break;
            case nameof(EmployeeRosterVM.SundayRoster):
                column.Visibility = VM!.UseSundays ? Visibility.Visible : Visibility.Collapsed;
                column.Header = $"Sunday ({VM!.StartDate.AddDays(6):dd-MMM})";
                break;
            default:
                e.Cancel = true;
                break;
        }
    }

    // Set display indexes after creation. 
    private void DataGrid_OnAutoGeneratedColumns(object? sender, EventArgs e)
    {
        if (sender is null) return;

        var grid = (DataGrid)sender;

        var empCol = grid.Columns.First(c => c.Header.ToString() == "Employee");

        var inactiveBinding = new Binding(nameof(EmployeeRosterVM.IsInactive))
        {
            Converter = new BoolToEmployeeBrushConverter()
        };

        empCol.DisplayIndex = 0;
        if (!empCol.CellStyle.IsSealed) empCol.CellStyle.Setters.Add(new Setter(TextBlock.ForegroundProperty, inactiveBinding));

        grid.Columns.First(c => c.Header.ToString() == "Shift").DisplayIndex = 1;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Monday*")).DisplayIndex = 2;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Tuesday*")).DisplayIndex = 3;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Wednesday*")).DisplayIndex = 4;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Thursday*")).DisplayIndex = 5;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Friday*")).DisplayIndex = 6;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Saturday*")).DisplayIndex = 7;
        grid.Columns.First(c => Regex.IsMatch(c.Header.ToString() ?? "","^Sunday*")).DisplayIndex = 8;
    }

    private void TextBox_GotKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
    {
        if (sender is not TextBox textBox) return;
        // Fixes issue when clicking cut/copy/paste in context menu
        if (textBox.SelectionLength == 0)
            textBox.SelectAll();
        if (int.TryParse(textBox.Text, out _)) return;
        textBox.Text = "0";
        e.Handled = true;
    }

    private void TextBox_LostMouseCapture(object sender, MouseEventArgs e)
    {
        if (sender is not TextBox textBox) return;
        // If user highlights some text, don't override it
        if (textBox.SelectionLength == 0)
            textBox.SelectAll();

        // further clicks will not select all
        textBox.LostMouseCapture -= TextBox_LostMouseCapture;
    }

    private void TextBox_LostKeyboardFocus(object sender, KeyboardFocusChangedEventArgs e)
    {
        if (sender is not TextBox textBox) return;
        // once we've left the TextBox, return the select all behavior
        textBox.LostMouseCapture += TextBox_LostMouseCapture;
    }

    private void ShiftTarget_OnPreviewTextInput(object sender, TextCompositionEventArgs e)
    {
        e.Handled = !IsTextAllowed(e.Text);
    }

    private static readonly Regex regex = new("[^0-9.-]+"); //regex that matches disallowed text
    private static bool IsTextAllowed(string text)
    {
        return !regex.IsMatch(text);
    }

    private void ShiftTarget_LostFocus(object sender, RoutedEventArgs e)
    {
        if (sender is not TextBox textBox) return;
        if (int.TryParse(textBox.Text, out _)) return;
        textBox.Text = "0";
        e.Handled = true;
    }

    private void ShiftTarget_Changed(object sender, TextChangedEventArgs e)
    {
        if (sender is not TextBox textBox) return;

        if (textBox.Text is "")
        {
            textBox.Text = "0";
            return;
        }

        if (int.TryParse(textBox.Text, out _)) return;

        if (textBox.Text.Length <= 9) return;

        textBox.Text = "999999999";
    }

}